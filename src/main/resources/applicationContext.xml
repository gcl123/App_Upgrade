<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

    <!--加载数据资源属性文件 -->
    <bean id="propertyPlaceholderConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
    </bean>
    <!--配置数据源-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${jdbc_url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
        <property name="initialSize" value="${initialSize}"/>
        <property name="maxActive" value="${maxActive}"/>
        <property name="maxIdle" value="${minIdle}"/>
        <property name="minIdle" value="${minIdle}"/>
        <property name="maxWait" value="${maxWait}"/>
        <property name="defaultAutoCommit" value="true"/>
        <property name="validationQuery" value="select 0"/>
        <property name="testOnBorrow" value="true"/>
    </bean>

    <!-- 配置session工厂 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--<property name="configLocation" value="classpath:myBatis-config.xml"/>-->
        <property name="mapperLocations" value="classpath:mappers/*.xml"/>
    </bean>


    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.tt.javaserver.web.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="annotationClass" value="org.springframework.stereotype.Repository"/>
    </bean>

    <!-- 配置事务管理器,管理数据源事务处理 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 配置事务通知 -->
    <tx:advice id="advice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 默认只处理运行时异常，可加rollback-for="Exception/Throwable"等处理所有异常或包括错误 -->
            <tx:method name="insert*" propagation="REQUIRED"
                       rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED"
                       rollback-for="Exception"/>
            <tx:method name="delete*" propagation="REQUIRED"
                       rollback-for="Exception"/>
            <tx:method name="*" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>
    <!-- 配置切面织入的范围,后边要把事务边界定在service层 -->
    <aop:config>
        <aop:advisor advice-ref="advice"
                     pointcut="execution(* com.tt.javaserver.web.service.impl.*.*(..))"/>
    </aop:config>


    <!--开启注解扫描-->
    <context:component-scan base-package="com.tt.javaserver.web" use-default-filters="true">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <bean id="initializeService" class="com.tt.javaserver.web.biz.InitApp" init-method="init"/>

    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="5"/>
        <property name="keepAliveSeconds" value="300"/>
        <property name="maxPoolSize" value="50"/>
        <property name="queueCapacity" value="25"/>
    </bean>


    <!--&lt;!&ndash; 配置事务管理器,管理数据源事务处理 &ndash;&gt;-->
    <!--<bean id="transactionManager"-->
    <!--class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
    <!--<property name="dataSource" ref="dataSource" />-->
    <!--</bean>-->
    <!--&lt;!&ndash; 配置事务通知 &ndash;&gt;-->
    <!--<tx:advice id="advice" transaction-manager="transactionManager">-->
    <!--<tx:attributes>-->
    <!--&lt;!&ndash; 默认只处理运行时异常，可加rollback-for="Exception/Throwable"等处理所有异常或包括错误 &ndash;&gt;-->
    <!--<tx:method name="insert*" propagation="REQUIRED"-->
    <!--rollback-for="Exception" />-->
    <!--<tx:method name="update*" propagation="REQUIRED"-->
    <!--rollback-for="Exception" />-->
    <!--<tx:method name="delete*" propagation="REQUIRED"-->
    <!--rollback-for="Exception" />-->
    <!--<tx:method name="*" propagation="SUPPORTS" />-->
    <!--</tx:attributes>-->
    <!--</tx:advice>-->
    <!--&lt;!&ndash; 配置切面织入的范围,后边要把事务边界定在service层 &ndash;&gt;-->
    <!--<aop:config>-->
    <!--<aop:advisor advice-ref="advice"-->
    <!--pointcut="execution(* com.tt.javaserver.web.service.impl.*.*(..))" />-->
    <!--</aop:config>-->
    <!--&lt;!&ndash; 配置SessionTemplate，已封装了繁琐的数据操作 &ndash;&gt;-->
    <!--<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">-->
    <!--<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />-->
    <!--</bean>-->

    <!-- <context:component-scan base-package="*" /> -->


    <!--&lt;!&ndash; 自动扫描组件，要把controller去除，他们是在spring-mvc.xml中配置，如果不去除会影响事务管理。 &ndash;&gt;-->
    <!--<context:component-scan base-package="com.tt.javaserver.web">-->
    <!--<context:exclude-filter type="annotation"-->
    <!--expression="org.springframework.stereotype.Controller" />-->
    <!--</context:component-scan>-->

    <!-- 配置 转换器，对于在basePackage设置的包（包括子包）下的接口类，
    如果接口类的全类名在Mapper.xml文件中和定义过命名空间一致，
     将被转换成spring的BEAN，在调用
        的地方通过@Autowired方式将可以注入接口实例 -->

</beans>